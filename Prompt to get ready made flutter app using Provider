Generate a full, production-ready, error-free Flutter project with the following features and architecture, using Provider for state management:

1. Centralized Architecture
	AppColors: Light & dark color palettes. Theme-aware getters (return correct color based on current theme).
	AppTexts: Centralized text constants.
	AppTextStyles: Centralized text styles, theme-aware.
	AppDimensions: Centralized paddings, margins, font scaling, adaptive for responsiveness.
	AppThemes: Light and Dark theme definitions. Persistent theme toggle using SharedPreferences.
	Centralized API service with GET, POST, PUT, DELETE, timeout & error handling.
	Centralized internet connectivity checker (using latest connectivity_plus → List<ConnectivityResult>).
	Centralized loading dialog / progress indicator.
	Centralized named route system with data passing.

2. State Management

	Provider for state management.

	Separate Provider classes for:
		Form state
		API data state
		Theme state
		Connectivity state

	Reactive UI updates using Providers.

3. Forms & Validation
	Support all input types:
		Text
		Number
		Email
		Password
		Dropdown
		Radio
		Checkbox
		Switch
		Date Picker

	Live validation with debounce (while typing).
	Show error text below fields (not on initial page load).
	Invalid fields show red border.
	Reusable ValidatedField widget for text-like inputs.
	Submit button:
		Validates all fields.
		If invalid → prevents submission.
		Scrolls to first invalid field automatically.
		Auto-focuses first invalid text field (cursor placed inside).

	Form state integrated with Provider.

4. API Handling
	Centralized API class (GET, POST, PUT, DELETE).
	Handle network errors & timeouts gracefully.
	Show snackbar/toast on API errors.
	Parse JSON into strongly-typed model classes.
	API state integrated with Provider (reactive UI).

5. Routing & Navigation
	Named route system (AppRoutes).
	Data passing between screens.
	Example: navigate with arguments and receive them on another screen.

6. Loading & Progress
	Centralized loading overlay/dialog.
	Controlled via Provider.

7. Internet Connectivity
	Use connectivity_plus (new API → Stream<List<ConnectivityResult>>).
	Detect offline/online states.
	Show alert/snackbar when offline.
	Auto-retry option for failed requests.
	Connectivity state managed via Provider.

8. Responsiveness
	Adaptive layouts for phone/tablet.
	Centralized dimensions, font scaling, paddings.
	Widgets and themes scale properly across devices.

9. Dark/Light Theme
	Theme-aware colors, text styles, widgets.
	Persistent toggle with SharedPreferences.
	Theme state managed with Provider.

10. Folder Structure
lib/
  core/           // Colors, texts, textstyles, dimensions, themes
  utils/          // Validators, debouncer, api, connectivity
  widgets/        // Reusable widgets (validated field, loading dialog)
  screens/        // All screens
  models/         // Data models
  providers/      // Provider classes
  routes/         // Route management
  main.dart

11. Additional Requirements

	Null safety everywhere.
	Clean, scalable code with comments.
	Example Form Screen:
		All field types included.
		Live validation.
		Submit scrolls & focuses first invalid field.

	Example API Screen:
		Shows loading + error handling.

	Example Routing:
		Navigation with data passing.

	Example Connectivity:
		Online/offline detection.

⚡ Deliverable:

A ready-to-run Flutter project as a zip file, fully error-free, matching the above structure and features.
